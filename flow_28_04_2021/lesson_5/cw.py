"""SQL и базы данных"""

# ЧТО ТАКОЕ БАЗА ДАННЫХ?
# Простым языком, база данных это структурированное хранилище информации. В зависимости от структуры
# построения баз данных они могут быть:
# - реляционные (Postgresql, SQLite)
# - документоориентированные (MongoDB)
# - time-series (InfluxDB)

# В реляционных базах данных вся информация хранится в виде таблиц, которые могут быть связанны между собой.


# SQL - SQL — простыми словами, это язык программирования структурированных запросов
# (SQL, Structured Query Language), который используется в качестве способа общения с базами данных.

# SQLite - самая легковесная БД, её структура умещается в файл, который можно перекидывать хоть
# по сети или в телеграмме или по почте.

# БАЗОВЫЕ КОМАНДЫ:
# СОЗДАНИЕ БАЗЫ ДАННЫХ SQLite3 - создаём через SQLite Studio, через кнопку new database, где указываем путь к файлу

# СОЗДАНИЕ ПРОСТОЙ ТАБЛИЦЫ:
"""CREATE TABLE products (
    product_id INTEGER,
    description TEXT,
    quantity INTEGER
    );
"""

# ХОЗЯЙКЕ НА ЗАМЕТКУ: id - плохое имя для колонки, лучше выбирать другое имя, например product_id

# Если попытаться повторно создать ту же самую таблицу, то вылезет ошибка. Бывают ситуации, например когда
# нужно повторно прогнать миграции в базе.(это набор команд, которые выстраивают структуру базы) и тогда
# полезно добавлять проверку на существование таблицы:

# СОЗДАНИЕ ПРОСТОЙ ТАБЛИЦЫ С ПРОВЕРКОЙ НА СУЩЕСТВОВАНИЕ:
"""
CREATE TABLE IF NOT EXISTS products (
    product_id INTEGER,
    description TEXT,
    quantity INTEGER
    );
"""

# У нас по бизнес-требованиям получается, что каждый продукт в базе должен быть уникальным по своему id,
# поэтому можно и нужно ввести ограничение по полю product_id.

"""
CREATE TABLE IF NOT EXISTS products (
    product_id INTEGER PRIMARY KEY, -- теперь у нас product_id будет уникальным идентификатором
    description TEXT,
    quantity INTEGER
    );
"""

# ТАБЛИЦУ МОЖНО ОЧЕНЬ ПРОСТО УДАЛИТЬ (трудно найти, легко потерять и невозможно забыть):
"""
DROP TABLE IF EXISTS products
"""

# ВЫБОРКА ДАННЫХ ИЗ ТАБЛИЦЫ:
"""
SELECT * FROM products; -- все колонки, вся таблица
"""

# ВСТАВКА ДАННЫХ В ТАБЛИЦУ:
"""
INSERT INTO products VALUES (123, 'Лук', 120); -- вставка по всем колонкам

INSERT INTO products (product_id) VALUES (1); -- вставка в конкретное поле
"""
# Мы можем управлять обязательность полей в базе при создании таблицы:
"""
CREATE TABLE IF NOT EXISTS products (
    product_id INTEGER PRIMARY KEY,
    description TEXT NOT NULL, -- теперь при вставке данных эта колонка не может оставаться NULL
    quantity INTEGER NOT NULL -- теперь при вставке данных эта колонка не может оставаться NULL
    );
"""

# Теперь при попытке записать данные, в которых мы что-то недодали будет падать ошибка
# А теперь давайте представим, что мы хотим, чтобы у нас id присваивался базой автоматически и
# возвращался нам в качестве ответа:

"""
CREATE TABLE IF NOT EXISTS products (
    product_id INTEGER PRIMARY KEY AUTOINCREMENT,
    description TEXT NOT NULL, -- теперь при вставке данных эта колонка не может оставаться NULL
    quantity INTEGER NOT NULL -- теперь при вставке данных эта колонка не может оставаться NULL
    );
"""

# Теперь id явно вставлять не нужно:
"""
INSERT INTO products (description, quantity) VALUES ('Лук', 120) RETURNING product_id;
"""
